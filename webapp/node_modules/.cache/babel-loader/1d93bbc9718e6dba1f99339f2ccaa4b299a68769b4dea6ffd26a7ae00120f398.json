{"ast":null,"code":"/**\r\n * Calculate the distance between two points using the Haversine formula\r\n * @param lat1 Latitude of point 1\r\n * @param lon1 Longitude of point 1\r\n * @param lat2 Latitude of point 2\r\n * @param lon2 Longitude of point 2\r\n * @returns Distance in kilometers\r\n */\nexport function calculateDistance(lat1, lon1, lat2, lon2) {\n  const R = 6371; // Radius of the Earth in km\n  const dLat = deg2rad(lat2 - lat1);\n  const dLon = deg2rad(lon2 - lon1);\n  const a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  const distance = R * c; // Distance in km\n  return distance;\n}\n\n/**\r\n * Convert degrees to radians\r\n * @param deg Degrees\r\n * @returns Radians\r\n */\nfunction deg2rad(deg) {\n  return deg * (Math.PI / 180);\n}\n\n/**\r\n * Get the user's current location\r\n * @returns Promise that resolves to the user's location\r\n */\nexport function getUserLocation() {\n  return new Promise((resolve, reject) => {\n    if (!navigator.geolocation) {\n      reject(new Error('Geolocation is not supported by your browser'));\n    } else {\n      navigator.geolocation.getCurrentPosition(position => {\n        resolve({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => {\n        reject(error);\n      });\n    }\n  });\n}\n\n/**\r\n * Calculate the distance from the user to each theater\r\n * @param theaters List of theaters\r\n * @param userLocation User's location\r\n * @returns Theaters with distance property added\r\n */\nexport function calculateTheaterDistances(theaters, userLocation) {\n  return theaters.map(theater => {\n    const distance = calculateDistance(userLocation.latitude, userLocation.longitude, theater.latitude, theater.longitude);\n    return {\n      ...theater,\n      distance\n    };\n  });\n}\n\n/**\r\n * Get all movies from all theaters, with theater information\r\n * @param theaters List of theaters\r\n * @returns List of movies with theater information\r\n */\nexport function getAllMoviesWithTheaters(theaters) {\n  const moviesWithTheaters = [];\n  theaters.forEach(theater => {\n    theater.movies.forEach(movie => {\n      moviesWithTheaters.push({\n        ...movie,\n        theater\n      });\n    });\n  });\n  return moviesWithTheaters;\n}\n\n/**\r\n * Format a distance in kilometers to a human-readable string\r\n * @param distance Distance in kilometers\r\n * @returns Formatted distance string\r\n */\nexport function formatDistance(distance) {\n  if (distance < 1) {\n    return `${Math.round(distance * 1000)}m`;\n  }\n  return `${distance.toFixed(1)}km`;\n}","map":{"version":3,"names":["calculateDistance","lat1","lon1","lat2","lon2","R","dLat","deg2rad","dLon","a","Math","sin","cos","c","atan2","sqrt","distance","deg","PI","getUserLocation","Promise","resolve","reject","navigator","geolocation","Error","getCurrentPosition","position","latitude","coords","longitude","error","calculateTheaterDistances","theaters","userLocation","map","theater","getAllMoviesWithTheaters","moviesWithTheaters","forEach","movies","movie","push","formatDistance","round","toFixed"],"sources":["/Users/nao/tokyo_cinema/webapp/src/utils.ts"],"sourcesContent":["import { Theater, UserLocation, MovieWithTheater } from './types';\r\n\r\n/**\r\n * Calculate the distance between two points using the Haversine formula\r\n * @param lat1 Latitude of point 1\r\n * @param lon1 Longitude of point 1\r\n * @param lat2 Latitude of point 2\r\n * @param lon2 Longitude of point 2\r\n * @returns Distance in kilometers\r\n */\r\nexport function calculateDistance(\r\n  lat1: number,\r\n  lon1: number,\r\n  lat2: number,\r\n  lon2: number\r\n): number {\r\n  const R = 6371; // Radius of the Earth in km\r\n  const dLat = deg2rad(lat2 - lat1);\r\n  const dLon = deg2rad(lon2 - lon1);\r\n  const a =\r\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\r\n    Math.cos(deg2rad(lat1)) *\r\n      Math.cos(deg2rad(lat2)) *\r\n      Math.sin(dLon / 2) *\r\n      Math.sin(dLon / 2);\r\n  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\r\n  const distance = R * c; // Distance in km\r\n  return distance;\r\n}\r\n\r\n/**\r\n * Convert degrees to radians\r\n * @param deg Degrees\r\n * @returns Radians\r\n */\r\nfunction deg2rad(deg: number): number {\r\n  return deg * (Math.PI / 180);\r\n}\r\n\r\n/**\r\n * Get the user's current location\r\n * @returns Promise that resolves to the user's location\r\n */\r\nexport function getUserLocation(): Promise<UserLocation> {\r\n  return new Promise((resolve, reject) => {\r\n    if (!navigator.geolocation) {\r\n      reject(new Error('Geolocation is not supported by your browser'));\r\n    } else {\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve({\r\n            latitude: position.coords.latitude,\r\n            longitude: position.coords.longitude,\r\n          });\r\n        },\r\n        (error) => {\r\n          reject(error);\r\n        }\r\n      );\r\n    }\r\n  });\r\n}\r\n\r\n/**\r\n * Calculate the distance from the user to each theater\r\n * @param theaters List of theaters\r\n * @param userLocation User's location\r\n * @returns Theaters with distance property added\r\n */\r\nexport function calculateTheaterDistances(\r\n  theaters: Theater[],\r\n  userLocation: UserLocation\r\n): Theater[] {\r\n  return theaters.map((theater) => {\r\n    const distance = calculateDistance(\r\n      userLocation.latitude,\r\n      userLocation.longitude,\r\n      theater.latitude,\r\n      theater.longitude\r\n    );\r\n    return { ...theater, distance };\r\n  });\r\n}\r\n\r\n/**\r\n * Get all movies from all theaters, with theater information\r\n * @param theaters List of theaters\r\n * @returns List of movies with theater information\r\n */\r\nexport function getAllMoviesWithTheaters(theaters: Theater[]): MovieWithTheater[] {\r\n  const moviesWithTheaters: MovieWithTheater[] = [];\r\n  \r\n  theaters.forEach((theater) => {\r\n    theater.movies.forEach((movie) => {\r\n      moviesWithTheaters.push({\r\n        ...movie,\r\n        theater,\r\n      });\r\n    });\r\n  });\r\n  \r\n  return moviesWithTheaters;\r\n}\r\n\r\n/**\r\n * Format a distance in kilometers to a human-readable string\r\n * @param distance Distance in kilometers\r\n * @returns Formatted distance string\r\n */\r\nexport function formatDistance(distance: number): string {\r\n  if (distance < 1) {\r\n    return `${Math.round(distance * 1000)}m`;\r\n  }\r\n  return `${distance.toFixed(1)}km`;\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}